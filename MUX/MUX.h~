//
// Created by xiangyu zhang on 6/7/16.
//

#ifndef MUX_MUX_H
#define MUX_MUX_H
#include <vector>
#include <string>

template <typename T>
std::vector<T> operator+(const std::vector<T> &A, const std::vector<T> &B)
{
    std::vector<T> AB;
    AB.reserve( A.size() + B.size() );                // preallocate memory
    AB.insert( AB.end(), A.begin(), A.end() );        // add A;
    AB.insert( AB.end(), B.begin(), B.end() );        // add B;
    return AB;
}

template <typename T>
std::vector<T> &operator+=(std::vector<T> &A, const std::vector<T> &B)
{
    A.reserve( A.size() + B.size() );                // preallocate memory without erase original data
    A.insert( A.end(), B.begin(), B.end() );         // add B;
    return A;                                        // here A could be named AB
}

void strip_all(std::string& str,const std::string old_value)
{
    while(true)
    {
        if(str.find(old_value) != std::string::npos)
        {
            str.replace(str.find(old_value), old_value.length(), "");
        }
        else
        {
            break;
        }
    }

}

class Standard_Mux
{
public:
    Standard_Mux() = default;
    Standard_Mux(const std::vector<std::string> &input_info, const std::vector<std::string> &CB_info, const std::string &output_info);
    std::vector<std::string> to_vector(const unsigned& gate_index);
private:
    std::vector<std::string> single_input_MUX();
    std::vector<std::string> two_input_MUX(const std::string &in_info1,const std::string &in_info2 , std::string &out_info, const std::string &CB_info, const unsigned& unit_index, const unsigned& level_index, const bool flag);
    std::vector<std::string> model;
    std::vector<std::string> input;
    std::vector<std::string> CB;
    std::string output;
};

Standard_Mux::Standard_Mux(const std::vector<std::string> &input_info, const std::vector<std::string> &CB_info,
                           const std::string &output_info)
{
    input = input_info;
    CB = CB_info;
    output = output_info;
    unsigned input_size = input_info.size();
    unsigned CB_size = CB_info.size();



    if(input_size == 1)
    {
        model = single_input_MUX();
    }
    else
    {
        unsigned num_of_mux_this_line = input_size/2;
        unsigned level_counter = 0;
        // to initiate the generation, make input for this line to be PI, size for this line to be half of input, make level counter = 0
        std::vector<std::string> input_for_this_line = input_info;
        std::vector<std::string> output_for_this_line;
        std::string CB_for_this_line;

        while(num_of_mux_this_line != 1)            // for each line of tree, is this line is not the root
        {
            CB_for_this_line = CB_info[level_counter];

            //============================================
            /*
            std::cerr << "line num = " << level_counter << std::endl;
            std::cerr << std::endl;
            std::cerr << "Num of mux for this line: " << num_of_mux_this_line << std::endl;
            std::cerr << std::endl;
            std::cerr << "Input for this line:" << std::endl;
            for (auto i: input_for_this_line) {
                std::cerr << i << std::endl;
            }
            std::cerr << std::endl;
            std::cerr << "CB for this line:" << std::endl;
            std::cerr << CB_for_this_line << std::endl;
            std::cerr << std::endl;
             */
            //============================================

            for (unsigned num_of_unit = 0;
                 num_of_unit != num_of_mux_this_line; ++num_of_unit)   // for each mux in this line
            {
                std::string out_info;
                model += two_input_MUX(input_for_this_line[2*num_of_unit], input_for_this_line[2*num_of_unit + 1] ,out_info, CB_for_this_line, num_of_unit, level_counter, true);  // use 2 input, 1 CB and its unique index to generate a model and out_info
                output_for_this_line.push_back(out_info);
            }

            ++level_counter;
            input_for_this_line = output_for_this_line;
            num_of_mux_this_line = num_of_mux_this_line / 2;

            //============================================
            /*
            std::cerr << "output for this line:" << std::endl;
            for (auto i: input_for_this_line) {
                std::cerr << i << std::endl;
            }
            std::cerr << ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" << std::endl;
            */
            //============================================
            output_for_this_line.clear();
        }
        CB_for_this_line = CB_info[level_counter];
        model += two_input_MUX(input_for_this_line[0], input_for_this_line[1] ,output, CB_for_this_line, 0, level_counter, false);

        //============================================
        /*
        std::cerr << "line num = " << level_counter << std::endl;
        std::cerr << std::endl;
        std::cerr << "Num of mux for this line: " << num_of_mux_this_line << std::endl;
        std::cerr << std::endl;
        std::cerr << "Input for this line:" << std::endl;
        for (auto i: input_for_this_line) {
            std::cerr << i << std::endl;
        }
        std::cerr << std::endl;
        std::cerr << "CB for this line:" << std::endl;
        std::cerr << CB_for_this_line << std::endl;
        std::cerr << std::endl;
        */
        //============================================

    }
}
std::vector<std::string> Standard_Mux::single_input_MUX()
{

}
std::vector<std::string> Standard_Mux::two_input_MUX(const std::string &in_info1,const std::string &in_info2 , std::string &out_info, const std::string &CB_info, const unsigned& unit_index, const unsigned& level_index, const bool flag)
{

    std::vector<std::string> result;
    std::string inv_out = "INDEX_body_" + std::to_string(level_index) + "_" + std::to_string(unit_index) + "_inv";
    std::string and1_out = "INDEX_body_" + std::to_string(level_index) + "_" + std::to_string(unit_index) + "_and1";
    std::string and2_out = "INDEX_body_" + std::to_string(level_index) + "_" + std::to_string(unit_index) + "_and2";
    std::string or_out = "INDEX_body_" + std::to_string(level_index) + "_" + std::to_string(unit_index);
    result.push_back("inv1 gate( .a(" + CB_info +  "), .O(" + inv_out +") )");
    result.push_back("and2 gate( .a(" + in_info1 +"), .b(" + CB_info + "), .O(" + and1_out + ") );");
    result.push_back("and2 gate( .a(" + in_info2 +"), .b(" + inv_out + "), .O(" + and2_out + ") );");
    if(flag)
    {
        result.push_back("or2 gate( .a(" + and1_out + "), .b(" + and2_out + "), .O(" + or_out +") );");
        out_info = or_out;
    }
    else
    {
        result.push_back("or2 gate( .a(" + and1_out + "), .b(" + and2_out + "), .O(" + out_info +") );");
    }

    return result;
}

std::vector<std::string> Standard_Mux::to_vector(const unsigned &gate_index)
{
    auto result = model;
    for(auto &i: result)
    {
        while(i.find("INDEX") != std::string::npos)
        i.replace(i.find("INDEX"), 5, std::to_string(gate_index));
    }
    return result;
}


class Cool_Mux
{
public:
    Cool_Mux() = default;
    Cool_Mux(const std::vector<std::string> &input_info, const std::vector<std::string> &CB_info, const std::string &output_info);
    std::vector<std::string> to_vector(const unsigned& gate_index, const unsigned& inport_index);
private:
    std::string create_AND(const std::string &input1, const std::string &input2, const std::string &output);
    std::string create_OR(const std::vector<std::string> inputs, const std::string output_info);
    std::vector<std::string> model;
    std::vector<std::string> input;
    std::vector<std::string> CB;
    std::string output;

    unsigned Mux_size;
};

Cool_Mux::Cool_Mux(const std::vector<std::string> &input_info, const std::vector<std::string> &CB_info, const std::string &output_info)
{
    input = input_info;
    CB = CB_info;
    output = output_info;
    Mux_size = input_info.size();
    std::vector<std::string> AND_output;

    for(auto index = 0; index != Mux_size; ++index)
    {
        std::string this_and_output_wire = "INDEX_faninNUM_and" + std::to_string(index);    // "1_fanin1_and1"
        model.push_back(create_AND(input_info[index], CB_info[index], this_and_output_wire));
        AND_output.push_back(this_and_output_wire);
    }
    model.push_back(create_OR(AND_output, output_info));

}

std::string Cool_Mux::create_AND(const std::string &input1, const std::string &input2, const std::string &output)
{
    return "and2 gate( .a(" + input1 + "), .b(" + input2 + "), .O(" + output + ") );";
}
std::string Cool_Mux::create_OR(const std::vector<std::string> inputs, const std::string output_info)
{
    std::string result = "or" + std::to_string(Mux_size) + " gate(";
    char index = 'a';
    for(auto i: inputs)
    {
        result += " .";
        result.push_back(index++);
        result.push_back('(');
        result += i + "),";
    }
    result += " .O(" + output_info + ") );";
    std::cerr << result << std::endl;
    return result;
}

std::vector<std::string> Cool_Mux::to_vector(const unsigned& gate_index, const unsigned& inport_index)
{
    auto result = model;
    for(auto &i: result)
    {
        while(i.find("INDEX") != std::string::npos)
            i.replace(i.find("INDEX"), 5, std::to_string(gate_index));
        while(i.find("NUM") != std::string::npos)
            i.replace(i.find("NUM"), 3, std::to_string(inport_index));
    }
    return result;
}

#endif //MUX_MUX_H



ww